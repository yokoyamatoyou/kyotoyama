Kyotoyama Medical Image Analyzer最新版MVP設計・進捗管理
1. 概要
本プロジェクトは、MRI画像を中心とした読影業務を支援するためのMVP（Minimum Viable Product）を開発するものです。DICOM通信による画像取り込み、AIによる分析支援機能、Webベースのビューワー連携、読影コメント機能を統合し、読影医の作業効率向上を目指します。
2. 主な機能
DICOM画像の一括手動取込:DICOM SCUプロトコル（C-STORE, C-FIND, C-MOVE, C-GET）をサポート。DICOMwebプロトコル（WADO-RS）をサポート。
GUIによる接続先設定:接続先PACS/モダリティのAE Title, Host, PortをGUIから容易に設定・管理可能。
要注意ラベルOverlay出力:AI分析結果（ヒートマップ等）やユーザーによるアノテーションをPNGファイルとして出力し、元画像に重ねて表示。画像ファイルとOverlay用PNGファイルは同一ディレクトリに保存（MVP段階）。
Webビューワー連携:既存のOSSビューワー（OHIF Viewer/Cornerstone.js）と連携し、高度な画像表示機能を提供。
読影コメント機能:画像に対する所見やメモを記録・閲覧できる機能。
DICOM画像内焼き込み情報のOCR抽出 (GPT利用):画像に焼き込まれた患者情報や撮影条件などのテキスト情報を、GPTのOCR機能を用いて抽出し、メタデータとして利用。
VLM/LLM (GPT-4o)による読影レポート下書き生成 (実験的機能):ユーザーが選択した画像スライスをVLMが分析し、所見のサマリーやキーワードを抽出。読影レポートのドラフト（下書き）を自動生成する。（詳細は後述の「5. VLM/LLM (GPT-4o) 機能導入計画」を参照）
3. 機能要件（読影サポート向け）
基本画像操作:スライス送り、ズーム、パン、ウィンドウ/レベル調整（WW/WL）。
情報表示:Overlay用PNG画像の重ね合わせ表示。DICOMヘッダーから取得したメタ情報（患者名、撮影日時、シリーズ情報等）の表示。OCR機能で抽出した焼き込みメタ情報の表示。
インタラクション:読影コメントの投稿、編集、閲覧機能。VLMによって生成されたレポート下書きの表示と編集機能。
4. 技術スタック
プログラミング言語: Python 3.11
DICOM通信: pynetdicom, pydicom
Webビューワー: OHIF Viewer / Cornerstone.js
Webフレームワーク(バックエンド): FastAPI (推奨) または Flask
データベース: SQLite (MVP段階)
AI/LLM連携: OpenAI API
インフラ: Dockerは使用しない（MVP段階）
5. VLM/LLM (GPT-4o) 機能導入計画
本機能はMVPにおける実験的かつ中心的な機能の一つです。導入にあたり、以下の計画を厳守してください。
5.1. 機能の位置づけとコンセプト
最重要： 本機能を「診断支援ツール」ではなく、**「読影レポート作成支援のための実験的アシスタント」**と明確に位置づけます。病変の検出や確定診断を目的とするものではありません。
機能名（UI表示案）: 「AIサマリー生成 (β版)」「読影所見ドラフト作成 (実験的機能)」
目的:画像所見を自然言語で要約し、読影レポートのドラフト（下書き）を生成することで、医師のドキュメンテーション作業を効率化する。画像所見に関連するキーワード（例: 鑑別診断名）を提示し、医師の思考を補助する。最新のVLMの医療画像解析における可能性と限界を検証する。
5.2. 技術的実装計画
API選定と環境構築:モデル: GPT-4o を選定します。準備: OpenAIのAPIキーを取得し、サーバーの環境変数として設定します（コードへのハードコーディングは禁止）。Pythonのopenaiライブラリをインストールします。
画像の前処理とエンコード:バックエンドにて、以下の前処理パイプラインを実装します。スライス選択: ユーザーがビューワー上で選択した特定のスライスを処理対象とします。WW/WL適用: pydicomでDICOMを読み込み、適切なWW/WLを適用してピクセル配列を取得します。フォーマット変換: PillowまたはOpenCVを使い、ピクセル配列をPNG形式の画像に変換します。Base64エンコード: 生成したPNG画像を、APIに送信するためにBase64形式の文字列にエンコードします。
プロンプトエンジニアリング（最重要）:性能はプロンプトの質に依存します。APIに送信するプロンプトには、以下の要素を必ず含めてください。
役割設定: 「あなたは熟練の放射線科医を補助するAIアシスタントです。」
コンテキスト情報: DICOMヘッダーから取得した情報（モダリティ、撮像シーケンス等）を渡します。例: 「これはT2強調画像の脳MRI、アキシャル断です。」
タスク指示: 「提示された画像について、以下の構造化フォーマットで客観的な所見を記述してください。異常が疑われる場合は、その位置と特徴を記述してください。」
出力フォーマット指定（JSON形式）:
{
  "findings_summary": "（画像全体の客観的な所見サマリー）",
  "abnormalities": [
    {
      "location": "（異常が疑われる所見の位置、例：右前頭葉）",
      "description": "（所見の詳細、例：境界明瞭な高信号域を認める）"
    }
  ],
  "impression_keywords": ["（考えられる鑑別診断のキーワード、例：脳腫瘍, 脳梗塞）"],
  "disclaimer": "This is an experimental analysis by AI and should not be used for final diagnosis."
}
制約条件: 「これは実験的な機能であり、確定診断は行わないでください。客観的な所見の記述に留めてください。」
API連携とバックエンド実装:Webフレームワーク（FastAPI等）で、APIリクエストを処理するエンドポイント（例: /api/analyze_slice）を作成します。APIキーは必ずサーバーサイドでのみ使用し、フロントエンドには渡さないでください。
5.3. UI/UX計画
実行トリガー: ビューワー上に、**「AIサマリー生成 (β)」**のような、実験的機能であることが明確にわかるボタンを配置します。
処理中フィードバック: ボタンクリック後、API応答中は「AIが解析中です...」といったローディング表示を必ず行ってください。
結果の表示:推奨: 「読影コメント」のテキストボックスに、編集可能なドラフトとして生成結果を挿入します。結果の上下に、以下の免責事項（ディスクレーマー）を常時表示してください。
【免責事項】この文章はAIによって生成されたものであり、不正確な情報や誤りを含む可能性があります。診断の根拠とせず、必ず専門医が内容を確認・修正してください。
5.4. リスク・倫理・セキュリティ計画
個人情報保護:アノニマイズ処理: 画像に焼き込まれた患者情報（氏名、ID等）は、APIに送信する前に**必ずマスキング処理（黒塗り）**を施してください。
データ利用ポリシー: OpenAIのAPIデータ利用ポリシーを確認し、入力データがモデル学習に使われない設定（Zero Retention）になっているか確認します。
信頼性・安全性:UI/UX計画で述べた免責事項の表示を徹底することが、最大のリスク軽減策です。プロジェクトのREADMEにも、本機能の限界とリスクを明記してください。
5.5. コスト管理計画
モニタリング: OpenAIのダッシュボードでAPI利用料を定期的に監視します。
利用制限: 意図しない高額請求を防ぐため、アカウントレベルでの利用上限額設定や、アプリケーションレベルでのAPI呼び出し回数制限（例: 1ユーザーあたり1日5回まで）の実装を検討します。
6. 進捗管理
[x] 要件定義・設計方針決定
[ ] DICOM通信
[ ] SCU基本実装 (pynetdicom)
[ ] WADO-RSサポート
[ ] UI/UX
[ ] 送信先設定GUI
[ ] 一括取込UI
[ ] ビューワー連携
[ ] OHIF/Cornerstone連携・基本画像表示
[ ] コア機能
[ ] Overlay PNG出力
[ ] コメント機能実装
[ ] GPT OCR連携・メタ情報抽出
[ ] VLM機能実装
[ ] VLM: API連携・環境構築
[ ] VLM: 画像前処理・エンコード実装
[ ] VLM: プロンプト設計とJSON出力実装
[ ] VLM: 患者情報マスキング処理実装
[ ] VLM: UI/UX（ボタン、結果表示、免責事項）実装
[ ] ドキュメント
[ ] README/設計ドキュメント更新
7. 旧MVP（Streamlit版）
本リポジトリには以下のStreamlitベースMVPも含まれます（将来的に統合予定）。
セットアップ
python -m venv .venv
source .venv/bin/activate
pip install -r mvp-medical-app/requirements.txt
実行
streamlit run mvp-medical-app/app.py
テスト
pytest
8. 今後の展望
クラウドストレージへの移行（S3/GCS等）
ユーザー認証・認可機能
操作監査ログの記録
マルチシリーズ対応、3D表示
計測ツール（距離、面積、角度）
他モダリティ（CT, XA等）への拡張
連絡事項:
進捗・設計方針の変更は、このドキュメントに随時追記してください。チームメンバー全員が常に最新の状態を参照できるよう、整備をお願いします。
